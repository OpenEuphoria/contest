#!/usr/bin/eui
include std/io.e
---------------------------
-- Unkmar's cpu Emulator --
---------------------------

sequence cmds = command_line(), 
	r = "0000000000" - 48,
	code = read_lines(cmds[3]),
	m

integer ip=1,
	lc = length(code)
while lc > ip do
	sequence chunk = code[ip] & 0
	integer cmd= chunk[1]-48,
		p1 = chunk[2]-47,
		p2 = chunk[3]-47
	if cmd = 15 then
		-- Print
		if p1 = 16 then
			printf(1, "%d ", r[p2])
		else
			printf(1, "%d\n", r[p1])
		end if
	else
		integer
		rp1 = r[p1],
		rp2 = r[p2],
		rp1i = rp1
		switch cmd do
			case 0 then
				-- Jump (8)
				if rp2 then
					ip=rp1
				end if
			case 1 then
				-- Halt
				ip=lc
			case 2 then
				-- Assign
				rp1i = p2 - 1
			case 3 then
				-- Add
				rp1i += p2 - 1
			case 4 then
				-- Multiply
				rp1i *= p2 - 1
			case 5 then
				-- Copy
				rp1i = rp2
			case 6 then
				-- Add registers
				rp1i += rp2
			case 7 then
				-- Multiply registers
				rp1i *= rp2
			case 8 then
				-- Pop
				rp1i = m[rp2+1]
			case 9 then
				-- Push
				m[rp2+1] = rp1
		end switch
		r[p1] = rp1i
	end if

	ip += 1
end while
